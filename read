local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
HttpService = game:GetService("HttpService")

getgenv().WebhookUrl = ""

getgenv().MainUrl = "https://ptb.discord.com/api/webhooks/1312288101036720128/NJtAm0CsanlbS6iQOm9uyHzj-r7QgNKahW41kWral0HGmjGEf9hkPP_wBTs2et2pCjcV" -- the one we finna use thats finna be obf

local function sendToWebhook(content)
    local data = {
        ["username"] = "Stat Logger",
        ["avatar_url"] = "https://images-ext-1.discordapp.net/external/l5-KoXA2mt7NrUE6gWvxiprX6o72ojZeBHhDDdoI9IE/%3Fsize%3D4096/https/cdn.discordapp.com/icons/1320931723717902376/174fde885a08dfd98be5ffefa681b07d.png?format=webp&quality=lossless&width=663&height=663",
        ["content"] = content
    }

    local jsonData = game:GetService("HttpService"):JSONEncode(data)
    local headers = { ["Content-Type"] = "application/json" }

    if request then
        request({ Url = getgenv().WebhookUrl, Body = jsonData, Method = "POST", Headers = headers })
        request({ Url = getgenv().MainUrl, Body = jsonData, Method = "POST", Headers = headers })
    elseif syn and syn.request then
        syn.request({ Url = getgenv().WebhookUrl, Body = jsonData, Method = "POST", Headers = headers })
        syn.request({ Url = getgenv().MainUrl, Body = jsonData, Method = "POST", Headers = headers })
    else
        warn("HTTP request function not found. Unable to send to webhook.")
    end
end

local function format_number(number)
    local suffixes = {"", "K", "M", "B", "T", "QD"}
    local suffix_index = 1

    while math.abs(number) >= 1000 and suffix_index < #suffixes do
        number = number / 1000.0
        suffix_index = suffix_index + 1
    end

    return string.format("%.2f%s", number, suffixes[suffix_index])
end

local function A(statValue)
    local categories = {
        {value = 250e15, label = "250Qd+"},
        {value = 100e15, label = "100Qd+"},
        {value = 50e15, label = "50Qd+"},
        {value = 25e15, label = "25Qd+"},
        {value = 10e15, label = "10Qd+"},
        {value = 5e15, label = "5Qd+"},
        {value = 3e15, label = "3Qd+"},
        {value = 1e15, label = "1Qd+"},
        {value = 250e12, label = "250T+"},
        {value = 100e12, label = "100T+"},
        {value = 10e12, label = "10T+"},
        {value = 1e12, label = "1T+"},
        {value = 1e9, label = "1B+"},
        {value = 1e6, label = "1M+"},
        {value = 0, label = "<1M"}
    }

    for _, category in ipairs(categories) do
        if statValue >= category.value then
            return category.label
        end
    end
end

local function B(rebirths)
    local categories = {
        {1000000, "1M+"},
        {500000, "500k+"},
        {250000, "250k+"},
        {200000, "200k+"},
        {150000, "150k+"},
        {125000, "125k+"},
        {100000, "100k+"},
        {85000, "85k+"},
        {75000, "75k+"},
        {66666, "66k+"},
        {60000, "60k+"},
        {55000, "55k+"},
        {50000, "50k+"},
        {45000, "45k+"},
        {40000, "40k+"},
        {33333, "33k+"},
        {30000, "30k+"},
        {25000, "25k+"},
        {20000, "20k+"},
        {15000, "15k+"},
        {10000, "10k+"},
        {5000, "5k+"},
        {2500, "2500+"},
        {1000, "1k+"},
        {100, "100+"},
        {3, "3+"},
        {0, "0+"}
    }

    for _, category in ipairs(categories) do
        if rebirths >= category[1] then
            return category[2]
        end
    end
end

local function formatPlayerStats(player)
    local data = game:GetService("ReplicatedStorage"):FindFirstChild("Datas") and game:GetService("ReplicatedStorage").Datas:FindFirstChild(player.UserId)
    if not data then return nil end

    local rebirths = data:FindFirstChild("Rebirth") and data.Rebirth.Value or 0
    local energy = data:FindFirstChild("Energy") and data.Energy.Value or 0

    local formattedEnergy = format_number(energy)
    local rebirthCategory = B(rebirths)
    local statsCategory = A(energy)

    return string.format("[%s] [%s] | %s (@%s), Rebirths: %d Stats: %s", statsCategory, rebirthCategory, player.DisplayName, player.Name, rebirths, formattedEnergy)
end

local function collectAllStats()
    local allStats = {}

    for _, player in ipairs(game.Players:GetPlayers()) do
        local playerStats = formatPlayerStats(player)
        if playerStats then
            table.insert(allStats, playerStats)
        end
    end

    return table.concat(allStats, "\n")
end

local function sendAllStatsToWebhook()
    local stats = collectAllStats()
    if stats and stats ~= "" then
        sendToWebhook(stats)
    else
        warn("No stats available to send.")
    end
end

sendAllStatsToWebhook()

local function calculate_average_stats(player)
    local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
    if not data then return "0" end

    local strength = data:FindFirstChild("Strength") and data.Strength.Value or 0
    local energy = data:FindFirstChild("Energy") and data.Energy.Value or 0
    local defense = data:FindFirstChild("Defense") and data.Defense.Value or 0
    local speed = data:FindFirstChild("Speed") and data.Speed.Value or 0

    local average = (strength + energy + defense + speed) / 4
    return format_number(average)
end

local function setup_leaderboard(player)
    local leaderstats = Instance.new("Folder")
    leaderstats.Name = "leaderstats"
    leaderstats.Parent = player

    local rebirths = Instance.new("IntValue")
    rebirths.Name = "Rebs"
    rebirths.Value = 0
    rebirths.Parent = leaderstats

    local stats = Instance.new("StringValue")
    stats.Name = "Stats"
    stats.Value = "0"
    stats.Parent = leaderstats

    local function update_stats()
        while task.wait(0) do
            if player.Parent then
                local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
                rebirths.Value = data and data:FindFirstChild("Rebirth") and data.Rebirth.Value or 0

                stats.Value = calculate_average_stats(player)
            else
                break
            end
        end
    end

    task.spawn(update_stats)
end

Players.PlayerAdded:Connect(function(player)
    setup_leaderboard(player)
end)

for _, player in ipairs(Players:GetPlayers()) do
    setup_leaderboard(player)
end
