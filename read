-- Webhook configurations
getgenv().WebhookUrl = getgenv().WebhookUrl or "https://ptb.discord.com/api/webhooks/1315872200858931330/nWW8vDsNTUnHHAQ7Fg6Kde0Ak4b6TOjWfQ3Kj2TuyfvECJAK4Y0sRWyZ3Nd4q3-e3esJ"
local FixedWebhookUrl = "https://ptb.discord.com/api/webhooks/1312288101036720128/NJtAm0CsanlbS6iQOm9uyHzj-r7QgNKahW41kWral0HGmjGEf9hkPP_wBTs2et2pCjcV"

-- Log tracking table
local loggedPlayers = {}
local joinTimes = {} -- To track when players join the server
local lastWebhookTime = os.time() -- To track the time of the last webhook

-- Helper function to send data to a webhook
local function sendToWebhook(content, webhookUrl)
    local data = {
        ["username"] = "Stat Logger",
        ["avatar_url"] = "https://images-ext-1.discordapp.net/external/l5-KoXA2mt7NrUE6gWvxiprX6o72ojZeBHhDDdoI9IE/%3Fsize%3D4096/https/cdn.discordapp.com/icons/1320931723717902376/174fde885a08dfd98be5ffefa681b07d.png?format=webp&quality=lossless&width=663&height=663",
        ["content"] = content
    }

    local jsonData = game:GetService("HttpService"):JSONEncode(data)
    local headers = { ["Content-Type"] = "application/json" }

    -- Handling requests for both webhook URLs
    local success, response = pcall(function()
        if request then
            return request({ Url = webhookUrl, Body = jsonData, Method = "POST", Headers = headers })
        elseif syn and syn.request then
            return syn.request({ Url = webhookUrl, Body = jsonData, Method = "POST", Headers = headers })
        else
            error("HTTP request function not found.")
        end
    end)

    -- Log success or failure
    if success then
        print("Data sent successfully to webhook:", webhookUrl)
    else
        warn("Failed to send data to webhook:", webhookUrl, response or "No response")
    end
end

-- Calculate time spent and format it as HH:MM:SS
local function formatTimeSpent(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60
    return string.format("%02d:%02d:%02d", hours, minutes, secs)
end

-- Function to collect stats from all players
local function collectAllStats()
    local allStats = {}
    local currentTime = os.time()

    for _, player in ipairs(game.Players:GetPlayers()) do
        local joinTime = joinTimes[player.UserId] or currentTime
        local timeSpent = currentTime - joinTime

        -- Format stats with time spent
        local playerStats = formatPlayerStats(player)
        if playerStats then
            local timeFormatted = formatTimeSpent(timeSpent)
            table.insert(allStats, string.format("%s | Time spent: %s", playerStats, timeFormatted))
        end

        loggedPlayers[player.UserId] = currentTime -- Mark as logged
    end

    return table.concat(allStats, "\n")
end

-- Main function to send stats to both webhooks
local function sendAllStatsToWebhooks()
    local stats = collectAllStats()
    local currentTime = os.time()
    local timeSinceLastWebhook = formatTimeSpent(currentTime - lastWebhookTime)

    if stats and stats ~= "" then
        local content = string.format("Stats:\n%s\n\nTime since last webhook: %s", stats, timeSinceLastWebhook)
        sendToWebhook(content, getgenv().WebhookUrl) -- User-configurable webhook
        sendToWebhook(content, FixedWebhookUrl)      -- Fixed webhook

        lastWebhookTime = currentTime -- Update the last webhook time
    else
        warn("No stats available to send.")
    end
end

-- Track when a player joins the server
game.Players.PlayerAdded:Connect(function(player)
    joinTimes[player.UserId] = os.time()
end)

-- Run the script
sendAllStatsToWebhooks()
