-- Define webhook URL
getgenv().WebhookUrl = getgenv().WebhookUrl or "https://ptb.discord.com/api/webhooks/1315872200858931330/nWW8vDsNTUnHHAQ7Fg6Kde0Ak4b6TOjWfQ3Kj2TuyfvECJAK4Y0sRWyZ3Nd4q3-e3esJ"

-- Function to send data to Discord webhook
local function sendToWebhook(content)
    local data = {
        ["content"] = content
    }
    local jsonData = game:GetService("HttpService"):JSONEncode(data)

    local headers = {
        ["content-type"] = "application/json"
    }

    local requestDetails = {
        Url = getgenv().WebhookUrl,
        Body = jsonData,
        Method = "POST",
        Headers = headers
    }

    -- Attempt to send the request
    local success, response = pcall(function()
        return request(requestDetails)
    end)

    if not success then
        warn("Failed to send data to webhook: ", response)
    end
end

-- Function to format a single player's stats
local function formatPlayerStats(player)
    local data = game:GetService("ReplicatedStorage"):FindFirstChild("Datas"):FindFirstChild(tostring(player.UserId))
    if not data then
        return nil
    end

    local rebirths = data:FindFirstChild("Rebirth") and data.Rebirth.Value or 0
    local stats = data:FindFirstChild("Stats") and data.Stats.Value or "0"

    return string.format("%s (%s), Rebirths: %d, Stats: %s", player.DisplayName, player.Name, rebirths, stats)
end

-- Function to gather all players' stats and send to the webhook
local function sendAllStatsToWebhook()
    local allStats = {}

    for _, player in ipairs(game.Players:GetPlayers()) do
        local playerStats = formatPlayerStats(player)
        if playerStats then
            table.insert(allStats, playerStats)
        end
    end

    if #allStats > 0 then
        local content = table.concat(allStats, "\n")
        sendToWebhook(content)
    else
        warn("No stats to send to the webhook.")
    end
end

-- Execute the function to send stats on script execution
sendAllStatsToWebhook()
