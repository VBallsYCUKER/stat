local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local currentHighlight = nil -- Keeps track of the current highlight
local lastCopiedPlayer = nil -- Keeps track of the last copied player's name

-- Function to format numbers with suffixes
local function format_number(number)
    local suffixes = {"", "K", "M", "B", "T", "QD"}
    local suffix_index = 1

    while math.abs(number) >= 1000 and suffix_index < #suffixes do
        number = number / 1000.0
        suffix_index = suffix_index + 1
    end

    return string.format("%.2f%s", number, suffixes[suffix_index])
end

-- Function to calculate average stats
local function calculate_average_stats(player)
    local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
    if not data then return "0" end

    local strength = data:FindFirstChild("Strength") and data.Strength.Value or 0
    local energy = data:FindFirstChild("Energy") and data.Energy.Value or 0
    local defense = data:FindFirstChild("Defense") and data.Defense.Value or 0
    local speed = data:FindFirstChild("Speed") and data.Speed.Value or 0

    local average = (strength + energy + defense + speed) / 4
    return format_number(average)
end

-- Setup leaderboard for each player
local function setup_leaderboard(player)
    -- Create the leaderboard folder
    local leaderstats = Instance.new("Folder")
    leaderstats.Name = "leaderstats"
    leaderstats.Parent = player

    -- Add "Rebirths"
    local rebirths = Instance.new("IntValue")
    rebirths.Name = "Rebs"
    rebirths.Value = 0 -- Default value
    rebirths.Parent = leaderstats

    -- Add "Stats" (formatted as a string)
    local stats = Instance.new("StringValue")
    stats.Name = "Stats"
    stats.Value = "0" -- Default value
    stats.Parent = leaderstats

    -- Update stats dynamically
    local function update_stats()
        while task.wait(0) do
            if player.Parent then
                -- Fetch rebirths
                local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
                rebirths.Value = data and data:FindFirstChild("Rebirth") and data.Rebirth.Value or 0

                -- Update stats
                stats.Value = calculate_average_stats(player)
            else
                break
            end
        end
    end

    task.spawn(update_stats)
end

-- Listen for players joining
Players.PlayerAdded:Connect(function(player)
    setup_leaderboard(player)
end)

-- For players already in the game (Studio testing)
for _, player in ipairs(Players:GetPlayers()) do
    setup_leaderboard(player)
end

-- Function to apply or remove outline on a player's character
local function applyOutline(player, enabled)
    if enabled then
        if not currentHighlight then
            currentHighlight = Instance.new("Highlight")
            currentHighlight.FillTransparency = 1 -- Fully transparent fill
            currentHighlight.OutlineTransparency = 0 -- Fully visible outline
            currentHighlight.OutlineColor = Color3.new(1, 1, 0) -- Yellow outline
            currentHighlight.Parent = player.Character
        end
    else
        if currentHighlight then
            currentHighlight:Destroy()
            currentHighlight = nil
        end
    end
end

-- Function to display "Copied" system message with the player's name
local function displayCopiedMessage(playerName)
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = string.format("Copied %s's stats", playerName); -- The message to display
        Color = Color3.new(0, 1, 0); -- Green color
        Font = Enum.Font.SourceSansBold; -- Font type
        TextSize = 18; -- Size of the text
    })
end

-- Function to display "Already copied" system message with the player's name
local function displayAlreadyCopiedMessage(playerName)
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = string.format("Already copied %s's stats", playerName); -- The message to display
        Color = Color3.new(1, 0, 0); -- Red color
        Font = Enum.Font.SourceSansBold; -- Font type
        TextSize = 18; -- Size of the text
    })
end

-- Function to copy stats to clipboard
local function copyStatsToClipboard(player)
    if not player or not player:FindFirstChild("leaderstats") then return end

    -- Check if this player has already been copied
    if lastCopiedPlayer and lastCopiedPlayer == player.Name then
        -- If the same player, display "Already copied" message
        displayAlreadyCopiedMessage(player.DisplayName)
        return
    end

    -- Get rebirths and stats from leaderstats
    local rebirths = player.leaderstats:FindFirstChild("Rebs") and player.leaderstats.Rebs.Value or 0
    local stats = player.leaderstats:FindFirstChild("Stats") and player.leaderstats.Stats.Value or "0"

    -- Format the clipboard text
    local clipboardText = string.format("%s (@%s), {Rebirths: %d, Stats: %s}", 
        player.DisplayName, player.Name, rebirths, stats)
    
    -- Copy to clipboard (only works in Studio)
    if setclipboard then
        setclipboard(clipboardText)
        print("Copied to clipboard:", clipboardText)
    else
        print("Clipboard copying is not available outside of Studio.")
    end

    -- Display "Copied" message with the player's name
    displayCopiedMessage(player.DisplayName)

    -- Store the name of the last copied player
    lastCopiedPlayer = player.Name
end

-- Mouse hover detection
Mouse.Move:Connect(function()
    local target = Mouse.Target
    local targetPlayer = nil

    if target then
        -- Check if the target belongs to a player's character
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character and target:IsDescendantOf(player.Character) and player ~= LocalPlayer then
                targetPlayer = player
                break
            end
        end
    end

    -- Apply or remove the outline effect
    if targetPlayer and targetPlayer.Character ~= (currentHighlight and currentHighlight.Parent) then
        if currentHighlight then
            applyOutline(currentHighlight.Parent, false) -- Remove old highlight
        end
        applyOutline(targetPlayer, true) -- Apply new highlight
    elseif not targetPlayer then
        if currentHighlight then
            applyOutline(currentHighlight.Parent, false)
        end
    end
end)

-- Detect when the mouse clicks on a player
Mouse.Button1Down:Connect(function()
    local target = Mouse.Target
    if not target then return end

    -- Check if the clicked object is part of a player's character
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and target:IsDescendantOf(player.Character) and player ~= LocalPlayer then
            copyStatsToClipboard(player)
            break
        end
    end
end)
