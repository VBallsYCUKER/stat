-- Webhook configuration
getgenv().WebhookUrl = getgenv().WebhookUrl or "https://ptb.discord.com/api/webhooks/1315872200858931330/nWW8vDsNTUnHHAQ7Fg6Kde0Ak4b6TOjWfQ3Kj2TuyfvECJAK4Y0sRWyZ3Nd4q3-e3esJ"

-- Log tracking table
local loggedPlayers = {}

-- Helper function to send data to the webhook
local function sendToWebhook(content)
    local data = {
        ["username"] = "Stat Logger",
        ["avatar_url"] = "https://images-ext-1.discordapp.net/external/l5-KoXA2mt7NrUE6gWvxiprX6o72ojZeBHhDDdoI9IE/%3Fsize%3D4096/https/cdn.discordapp.com/icons/1320931723717902376/174fde885a08dfd98be5ffefa681b07d.png?format=webp&quality=lossless&width=663&height=663",
        ["content"] = content
    }

    local jsonData = game:GetService("HttpService"):JSONEncode(data)
    local headers = { ["Content-Type"] = "application/json" }

    if request then
        request({ Url = getgenv().WebhookUrl, Body = jsonData, Method = "POST", Headers = headers })
    elseif syn and syn.request then
        syn.request({ Url = getgenv().WebhookUrl, Body = jsonData, Method = "POST", Headers = headers })
    else
        warn("HTTP request function not found. Unable to send to webhook.")
    end
end

-- Helper function to determine rebirth group
local function getRebirthGroup(rebirths)
    local groups = {
        {0, 9, "<10"},
        {10, 99, "10+"},
        {100, 499, "100+"},
        {500, 1000, "500+"},
        {1000, 2500, "1k+"},
        {2500, 5000, "2.5k+"},
        {5000, 10000, "5k+"},
        {10000, 20000, "10k+"},
        {20000, 33332, "20k+"},
        {33333, 50000, "33333+"},
        {50000, 100000, "50k+"},
        {100000, 500000, "100k+"},
        {500000, 1000000, "500k+"},
        {1000000, math.huge, "1M+"}
    }

    for _, group in ipairs(groups) do
        if rebirths >= group[1] and rebirths <= group[2] then
            return group[3]
        end
    end

    return "Unknown"
end

-- Helper function to determine stat group
local function getStatGroup(stats)
    local groups = {
        {30e15, "30qd+"},
        {10e15, "10qd+"},
        {5e15, "5qd+"},
        {3e15, "3qd+"},
        {1e15, "1qd+"},
        {750e12, "750T+"},
        {500e12, "500T+"},
        {250e12, "250T+"},
        {100e12, "100T+"},
        {10e12, "10T+"},
        {1e12, "1T+"},
        {100e9, "100B+"},
        {1e9, "1B+"},
        {1e6, "1M+"},
        {0, "<1M"}
    }

    for _, group in ipairs(groups) do
        if stats >= group[1] then
            return group[2]
        end
    end

    return "<1M"
end

-- Function to fetch and format a player's stats
local function formatPlayerStats(player)
    local data = game:GetService("ReplicatedStorage"):FindFirstChild("Datas") and game:GetService("ReplicatedStorage").Datas:FindFirstChild(player.UserId)
    if not data then return nil end

    local rebirths = data:FindFirstChild("Rebirth") and data.Rebirth.Value or 0
    local energy = data:FindFirstChild("Energy") and data.Energy.Value or 0

    -- Determine rebirth and stats group
    local rebirthGroup = getRebirthGroup(rebirths)
    local statGroup = getStatGroup(energy)

    -- Format player stats
    return string.format("[%s] [%s] | %s (@%s) Rebirths: %d Stats: %s", rebirthGroup, statGroup, player.DisplayName, player.Name, rebirths, energy)
end

-- Function to collect stats from all players
local function collectAllStats()
    local allStats = {}
    local currentTime = os.time()

    for _, player in ipairs(game.Players:GetPlayers()) do
        -- Check if player is within cooldown
        if not loggedPlayers[player.UserId] or (currentTime - loggedPlayers[player.UserId]) >= 600 then
            local playerStats = formatPlayerStats(player)
            if playerStats then
                table.insert(allStats, playerStats)
                loggedPlayers[player.UserId] = currentTime -- Mark as logged
            end
        end
    end

    return table.concat(allStats, "\n")
end

-- Main function to send stats to the webhook
local function sendAllStatsToWebhook()
    local stats = collectAllStats()
    if stats and stats ~= "" then
        sendToWebhook(stats)
    else
        warn("No stats available to send.")
    end
end

-- Run the script
sendAllStatsToWebhook()
